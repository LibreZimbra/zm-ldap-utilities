#!/usr/bin/perl
#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Zimbra, Inc.
#
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
#
# Must be run on a system where the ldap_url key is set to contain all of the
# replicas, as that is how the script determines what replicas exist.

use strict;
use lib '/opt/zimbra/zimbramon/lib';
use Net::LDAP;
use Date::Manip;

my (%c,%loaded,%status);
$c{zmlocalconfig}="/opt/zimbra/bin/zmlocalconfig";

my $ldap_starttls_supported=getLocalConfig("ldap_starttls_supported");
my $zimbra_home=getLocalConfig("zimbra_home");
my $ldap_master=getLocalConfig("ldap_master_url");
my $ldap_urls=getLocalConfig("ldap_url");
my ($mesgp, $entry);

my @masters = split / /, $ldap_master;
my @replicas = split / /, $ldap_urls;

for my $master (@masters) {
  my $index=0;
  chomp($master);
  for my $rep (@replicas) {
    chomp($rep);
    if ($master eq $rep) {
      splice @replicas,$index,1;
    }
    $index++;
  }
}  

foreach my $master (@masters) {
  my $pcsn;
  my $ldapp;
  chomp($master);
  if ($ldapp = Net::LDAP->new( $master, async=> 1 ) ) { 
    if ($master !~ /^ldaps/i) {
      if ($ldap_starttls_supported) {
        $mesgp = $ldapp->start_tls(
                   verify => 'none',
                   capath => "${zimbra_home}/conf/ca",
                 ) or die "start_tls: $@";
	    if($mesgp->code) {
		  $status{$master}[0]=3;
		  $status{$master}[1]="Could not execute StartTLS";
		}
      }
    }
  }
  if (!defined($ldapp)) {
    $status{$master}[0]=4;
    $status{$master}[1]="Server down";
    next;
  }
  $mesgp=$ldapp->bind;
  $mesgp->code && die "Unable to bind to master\n";
  
  $mesgp = $ldapp->search(
             base    =>  '',
             scope   =>  'base',
             filter  =>  '(objectclass=*)',
             attrs   =>  ['contextCSN']
           );
  if ($mesgp->code) {
    $status{$master}[0]=5;
    $status{$master}[1]="Unable to search";
    next;
  }
  $entry = $mesgp->entry(0);
  $pcsn = $entry->get_value('contextCSN');
  
  if (!$pcsn) {
    $status{$master}[0]=5;
	$status{$master}[1]="Not a replicated master\n";
  }
  $status{$master}[0]=0;
  $status{$master}[1]="In Sync";
  $status{$master}[2]=$pcsn;
  $ldapp->unbind;
}

if (scalar(@masters) > 1) {
  foreach my $master (@masters) {
    chomp($master);
    print "Master: $master";
    print " Code: ".$status{$master}[0];
    print " Status: ".$status{$master}[1];
	if(defined($status{$master}[2])) {
      print " CSN: ".$status{$master}[2];
	}
    print "\n";
  }
}

foreach my $replica (@replicas) {
  my ($pcsn, $rcsn, $mesgr, $ldapr);
  chomp($replica);

  if ($ldapr = Net::LDAP->new( $replica, async=> 1 ) ) {
    if ($replica !~ /^ldaps/i) {
      if ($ldap_starttls_supported) {
        $mesgr = $ldapr->start_tls(
                   verify => 'none',
                   capath => "${zimbra_home}/conf/ca",
                 ) or die "start_tls: $@";
        if($mesgr->code) {
          $status{$replica}[0]=3;
          $status{$replica}[1]="Could not execute StartTLS";
        }
      }
    }
  }
  if (!defined($ldapr)) {
    $status{$replica}[0]=4;
    $status{$replica}[1]="Server down";
    next;
  }

  $mesgr=$ldapr->bind;
  $mesgr = $ldapr->search(
             base    =>  "",
             scope   =>  'base',
             filter  =>  '(objectclass=*)',
             attrs   =>  ['contextCSN']
           );
  if ($mesgr->code) {
    $status{$replica}[0]=5;
    $status{$replica}[1]="Unable to search";
    next;
  }
  $entry = $mesgr->entry(0);
  $rcsn=$entry->get_value('contextCSN');

  my $master=$masters[0];
  chomp($master);
  $pcsn = $status{$master}[2];

  if ($rcsn eq $pcsn) {
    $status{$replica}[0]=0;
    $status{$replica}[1]="In Sync";
	$status{$replica}[2]=$rcsn;
  } else {
    my $rtime = $rcsn;
    my $ptime = $pcsn;
    $rtime =~ s/#.*//g;
    $ptime =~ s/#.*//g;
    $rtime =~ s/\..*//g;
    $ptime =~ s/\..*//g;
    $rtime =~ s/$/Z/;
    $ptime =~ s/$/Z/;
    my $tdelta = DateCalc($ptime,$rtime);
    $tdelta =~ s/^(.)0:0:/$1/;
    $tdelta =~ s/^\+(.*)$/$1s ahead/g;
    $tdelta =~ s/^\-(.*)$/$1s behind/g;
    foreach ("w","d", "h", "m") { $tdelta =~ s/:/$_ /;}
    $status{$replica}[0]=6;
    $status{$replica}[1]="$tdelta";
	$status{$replica}[2]=$rcsn;
  }
}

foreach my $replica (@replicas) {
  print "Replica: $replica";
  print " Code: ".$status{$replica}[0];
  print " Status: ".$status{$replica}[1];
  if(defined($status{$replica}[2])) {
    print " CSN: ".$status{$replica}[2];
  }
  print "\n";
}

sub getLocalConfig {
  my ($key,$force) = @_;

  return $loaded{lc}{$key}
    if (exists $loaded{lc}{$key} && !$force);
  my $val=`$c{zmlocalconfig} -x -s -m nokey ${key} 2> /dev/null`;
  $loaded{lc}{$key} = $val;
  return $val;
}
