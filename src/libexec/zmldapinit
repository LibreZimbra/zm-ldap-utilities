#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# 
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007 Zimbra, Inc.
# 
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# 
# ***** END LICENSE BLOCK *****
# 

# Add entries to or update master LDAP server
#
# Exit values
#
# 0 - success
# 1 - ldap start failed
# 2 - ldapmodify failed

use strict;
use Getopt::Std;
use Net::LDAP;
use Net::LDAP::LDIF;
use Net::LDAP::Entry;
use Crypt::SaltedHash;
use MIME::Base64;

our %options=();
our %loaded=();
our %saved=();

my $zimbra_home=getLocalConfig("zimbra_home");
my $ldap_master_url=getLocalConfig("ldap_master_url");
my $source_config_dir="/opt/zimbra/openldap/etc/openldap";
my $config_dir="/opt/zimbra/conf";

if ($#ARGV== -1) {
	setLocalConfigRandom("ldap_root_password");
	setLocalConfigRandom("zimbra_ldap_password");
} elsif ($#ARGV == 1) {
	my $ldap_root_pw = shift;
	my $ldap_admin_pw = shift;
	setLocalConfig("ldap_root_password", "$ldap_root_pw");
	setLocalConfig("zimbra_ldap_password", "$ldap_admin_pw");
} else {
	print "Wrong number of arguments, exiting\n";
	exit;
}

setLocalConfig("ldap_is_master","true");

my $zimbra_ldap_userdn=getLocalConfig("zimbra_ldap_userdn");
my $zimbra_ldap_password=getLocalConfig("zimbra_ldap_password");
my $ldap_root_password=getLocalConfig("ldap_root_password");
my $zimbra_server_hostname=getLocalConfig("zimbra_server_hostname");

# Get the SHA password.
my $ctx = Crypt::SaltedHash->new(algorithm => 'SHA-1');
$ctx->add("$ldap_root_password");
my $root_ssha_password = $ctx->generate;

$ctx = Crypt::SaltedHash->new(algorithm => 'SHA-1');
$ctx->add("$zimbra_ldap_password");
my $zimbra_ssha_password = $ctx->generate;

# Update slapd.conf
#
my $infile="$source_config_dir/slapd.conf";
my $outfile="$config_dir/slapd.conf.in";
open(IN,"<$infile");
open(OUT,">$outfile");
while (<IN>) {
  if ($_ =~ /^rootpw/) {
    $_ =~ s|^rootpw.*|rootpw $root_ssha_password|;
    print OUT $_;
  } else {
    print OUT $_;
  }
}
close IN;
close OUT;

if ( -f "/opt/zimbra/lib/conf/zimbra-ext.schema") {
    my $infile="$zimbra_home/conf/slapd.conf.in";
    my $outfile="/tmp/slapd.conf.$$";
    open(IN,"<$infile");
    my @data=<IN>;
    my $see=0;
    foreach my $line (@data) {
       if ($line =~ /zimbra-ext.schema/) {
          $see =1;
       }
    }
    close IN;
    if ($see == 0) {
        open(IN,"<$infile");
        open(OUT,">$outfile");
        while (<IN>) {
            if ($_ =~ /\/opt\/zimbra\/openldap\/etc\/openldap\/schema\/zimbra.schema/) {
                print OUT $_;
                print OUT 'include "/opt/zimbra/lib/conf/zimbra-ext.schema"';
                print OUT "\n";
            } else {
                print OUT $_;
            }
        }
        rename($outfile, $infile) or system("mv -f", $outfile, $infile);
        close OUT;
        close IN;
    }
}

# Update zimbra.ldif
$infile = "$source_config_dir/zimbra.ldif";
$outfile = "$config_dir/zimbra.ldif";
my $ldifin = Net::LDAP::LDIF->new( "$infile", "r", onerror => 'undef' );
my $ldifout = Net::LDAP::LDIF->new("$outfile", "w", onerror => 'undef' );
while( not $ldifin->eof()) {
  my $entry = $ldifin->read_entry ( );
  if ( $ldifin->error ( ) ) {
    print "Error msg: ", $ldifin->error ( ), "\n";
    print "Error lines:\n", $ldifin->error_lines ( ), "\n";
  } else {
      if ($entry->dn() eq "uid=zimbra,cn=admins,cn=zimbra") {
        $entry->replace (
          userPassword => "$zimbra_ssha_password",
        );
      }
    $ldifout->write($entry);
  }
}
$ldifin->done ( );
$ldifout->done ( );

# Start ldap

my $rc=`${zimbra_home}/bin/ldap start`;

if ( $rc eq 0 ) {
	exit 1;
}

my $ldap = Net::LDAP->new("$ldap_master_url")  or  die "$@";

# startTLS Operation, add later
#$mesg = $ldap->start_tls(
#        verify => 'require',
#        capath => "$zimbra_home/conf/ca",
#        ) or die "start_tls: $@";
#
#$mesg->code && die "TLS: " . $mesg->error . "\n";

my $mesg = $ldap->bind("cn=config", password=>"$ldap_root_password");

$infile = "$config_dir/zimbra.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } else {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zimbra_globalconfig.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } else {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zimbra_defaultcos.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } else {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zimbra_mimehandlers.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } else {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

if ( -d "/opt/zimbra/lib/conf/" ) {
    opendir(DIR, "/opt/zimbra/lib/conf") || die "can't opendir /opt/zimbra/lib/conf: $!";
    while (my $file = readdir(DIR)) {
       next unless (-f "/opt/zimbra/lib/conf/$file");
       next unless ( $file =~ m/ldif$/);
       $infile = "/opt/zimbra/lib/conf/$file";
       $ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
       while ( not $ldifin->eof() ) {
            my $entry = $ldifin->read_entry();
            if ( $ldifin->error() ) {
              print "Error msg: ", $ldifin->error ( ), "\n";
              print "Error lines:\n", $ldifin->error_lines ( ), "\n";
            } else {
              $entry->update($ldap);
            }
       }
    }
    closedir DIR;
}

exit 0;

sub setLocalConfig {
  my $key = shift;
  my $val = shift;

  if (exists $main::saved{lc}{$key} && $main::saved{lc}{$key} eq $val) {
    return;
  }
  $main::saved{lc}{$key} = $val;
  `/opt/zimbra/bin/zmlocalconfig -f -e ${key}=\'${val}\' 2> /dev/null`;
}

sub setLocalConfigRandom {
  my $key = shift;
  `/opt/zimbra/bin/zmlocalconfig -f -e -r ${key} 2> /dev/null`;
}

sub getLocalConfig {
  my $key = shift;

  return $main::loaded{lc}{$key}
    if (exists $main::loaded{lc}{$key});

  my $val = `/opt/zimbra/bin/zmlocalconfig -x -s -m nokey ${key} 2> /dev/null`;
  chomp $val;
  $main::loaded{lc}{$key} = $val;
  return $val;
}
