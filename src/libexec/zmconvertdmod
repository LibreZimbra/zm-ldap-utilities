#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# 
# Zimbra Collaboration Suite Server
# Copyright (C) 2009 Zimbra, Inc.
# 
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# 
# ***** END LICENSE BLOCK *****
# 
use strict;
use lib "/opt/zimbra/zimbramon/lib";
use Zimbra::Util::Common;
use Net::LDAP;
use Net::LDAP::LDIF;
use Getopt::Std;

my %options;

getopts('def',\%options) or die "Unable to set options\n";

my $admin_user = getLocalConfig("zimbra_ldap_userdn");
my $admin_password = getLocalConfig("zimbra_ldap_password");
my $hostname = getLocalConfig("zimbra_server_hostname");

our $platform = `/opt/zimbra/libexec/get_plat_tag.sh`;
chomp $platform;

my $id = `whoami`;
chomp $id;

if ($id ne "zimbra") {
  print STDERR "Error: must be run as zimbra user\n";
  exit (1);
}

if (!isInstalled("zimbra-ldap") || !isInstalled("zimbra-convertd")) {
  print "Can only be run when ldap or convertd are installed\n";
  exit 0;
}

if ( $options{d} + $options{e} > 1) {
  print "Only one of enable or disable may be specified.\n";
  usage();
  exit (1);
}

if ( $options{d} + $options{e} <= 0) {
  print "One of enable or disable must be specified.\n";
  usage();
  exit (1);
}

my $source_config_dir = "/opt/zimbra/openldap/etc/openldap";

my $infile;
if ( -f "$source_config_dir/convertd_mimehandlers.ldif") {
  $infile="$source_config_dir/convertd_mimehandlers.ldif";
} elsif ( -f "/opt/zimbra/convertd/conf/ldap/convertd_mimehandlers.ldif") {
  $infile="/opt/zimbra/convertd/conf/ldap/convertd_mimehandlers.ldif";
} else {
  print "Error! convertd_mimehandlers.ldif file not found";
  exit (1);
}

# Get the LDAP Master
my $ldap_master = getLocalConfig("ldap_master_url");

print "Updating LDAP\n";
my $ldap = Net::LDAP->new("$ldap_master")  or  die "$@";
my $mesg = $ldap->bind("$admin_user", password=>"$admin_password");

if ( $options{e} ) {
  $mesg = $ldap->modify('cn=text/enriched,cn=mime,cn=config,cn=zimbra',
    replace => [ 'zimbraMimeHandlerClass' => 'com.zimbra.cs.mime.handler.TextEnrichedHandler' ] );

  $mesg = $ldap->modify('cn=text/plain,cn=mime,cn=config,cn=zimbra',
    replace => [ 'zimbraMimeHandlerClass' => 'com.zimbra.cs.mime.handler.TextPlainHandler' ] );

  $mesg = $ldap->modify('cn=all,cn=mime,cn=config,cn=zimbra',
    changes => [
      replace => [ 'zimbraMimeHandlerClass' => 'ConverterHandler' ],
      add => [ 'zimbraMimeHandlerExtension' => 'convertd' ]
    ] );

  my $ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
  while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } else {
      if ($entry->dn eq "cn=application/x-zip-compressed,cn=mime,cn=config,cn=zimbra" ) {
        $entry->changetype("add");
        $entry->update($ldap);
      }
      if ($entry->dn eq "cn=application/zip,cn=mime,cn=config,cn=zimbra" ) {
        $entry->changetype("add");
        $entry->update($ldap);
      }
      if ($entry->dn eq "cn=text/rtf,cn=mime,cn=config,cn=zimbra" ) {
        $entry->changetype("add");
        $entry->update($ldap);
      }
      if ($entry->dn eq "cn=unsupported,cn=mime,cn=config,cn=zimbra" ) {
        $entry->changetype("add");
        $entry->update($ldap);
      }
    }
  }
}

if ( $options{d} ) {
  $mesg = $ldap->modify('cn=text/enriched,cn=mime,cn=config,cn=zimbra',
    replace => [ 'zimbraMimeHandlerClass' => 'TextEnrichedHandler' ] );

  $mesg = $ldap->modify('cn=text/plain,cn=mime,cn=config,cn=zimbra',
    replace => [ 'zimbraMimeHandlerClass' => 'TextPlainHandler' ] );

  $mesg = $ldap->modify('cn=all,cn=mime,cn=config,cn=zimbra',
    changes => [
      replace => [ 'zimbraMimeHandlerClass' => 'UnknownTypeHandler' ],
      delete => [ 'zimbraMimeHandlerExtension' => []]
    ] );

  $mesg = $ldap->delete('cn=application/x-zip-compressed,cn=mime,cn=config,cn=zimbra');
  $mesg = $ldap->delete('cn=application/zip,cn=mime,cn=config,cn=zimbra');
  $mesg = $ldap->delete('cn=text/rtf,cn=mime,cn=config,cn=zimbra');
  $mesg = $ldap->delete('cn=unsupported,cn=mime,cn=config,cn=zimbra');
}

$ldap->unbind();
$ldap->disconnect();

exit 0;

sub getLocalConfig {
  my $key = shift;

  return $main::loaded{lc}{$key}
    if (exists $main::loaded{lc}{$key});

  my $val = `/opt/zimbra/bin/zmlocalconfig -x -s -m nokey ${key} 2> /dev/null`;
  chomp $val;
  $main::loaded{lc}{$key} = $val;
  return $val;
}

sub isInstalled {
  my $pkg = shift;

  my $pkgQuery;

  my $good = 0;
  if ($platform =~ /DEBIAN/ || $platform =~ /UBUNTU/) {
    $pkgQuery = "dpkg -s $pkg";
  } elsif ($platform =~ /MACOSX/) {
    my @l = sort glob ("/Library/Receipts/${pkg}*");
    if ( $#l < 0 ) { return 0; }
    $pkgQuery = "test -d $l[$#l]";
  } elsif ($platform =~ /RPL/) {
    $pkgQuery = "conary q $pkg";
  } else {
    $pkgQuery = "rpm -q $pkg";
  }

  my $rc = 0xffff & system ("$pkgQuery > /dev/null 2>&1");
  $rc >>= 8;
  if (($platform =~ /DEBIAN/ || $platform =~ /UBUNTU/) && $rc == 0 ) {
    $good = 1;
    $pkgQuery = "dpkg -s $pkg | egrep '^Status: ' | grep 'not-installed'";
    $rc = 0xffff & system ("$pkgQuery > /dev/null 2>&1");
    $rc >>= 8;
    return ($rc == $good);
  } else {
    return ($rc == $good);
  }
}

sub usage() {
  print "Usage: $0 [-d] [-e]\n";
}
