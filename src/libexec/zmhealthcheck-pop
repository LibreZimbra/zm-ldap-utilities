#!/usr/bin/python
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2014 Zimbra, Inc.
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****
#
#
# 
# Consul CHECK script for Zimbra POP. See https://www.consul.io/docs/agent/checks.html
#
# Return:
#   0 if check is passing
#   1 if check is warning
#   (other) if check is failing
# 

import argparse
import poplib
import socket
import urlparse

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-url', help='URL', default='pop://127.0.0.1:110')
args = arg_parser.parse_args()

url = urlparse.urlparse(args.url)

try:
	socket.setdefaulttimeout(10)
	if url.scheme == 'pops':
		pop = poplib.POP3_SSL(url.hostname, url.port)
	elif url.scheme == 'pop':
		pop = poplib.POP3(url.hostname, url.port)
	else:
		raise IOError("Unsupported scheme in URL")
	
	pop.noop()
	pop.quit()
	print "{0}... OK".format(args.url)
	
except IOError as e:
	print "{0}... FAILED: {1}".format(args.url, e)
	exit(2)
except poplib.error_proto as e:
	print "{0}... FAILED: {1}".format(args.url, e)
	exit(2)
