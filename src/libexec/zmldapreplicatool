#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2011, 2012, 2013, 2014 Zimbra, Inc.
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****
# 
use strict;
use lib '/opt/zimbra/common/lib/perl5';
use Net::LDAP;
use XML::Simple;
use Getopt::Long;
use File::Copy qw/ cp /;
use File::Path;

if ( ! -d "/opt/zimbra/common/etc/openldap/schema" ) {
  print "ERROR: openldap does not appear to be installed - exiting\n";
  exit(1);
}

my $id = getpwuid($<);
chomp $id;
if ($id ne "zimbra") {
    print STDERR "Error: must be run as zimbra user\n";
    exit (1);
}
my ($help,$masterURI,$rid,$tls,$replEntry,$entryURI,$entryRID,$entryTLS,$query);
$rid=0;
$masterURI=0;
$tls=0;
$query=0;

my $opts_good = GetOptions(
        'h|help' => \$help,
        'q|query' => \$query,
        'm|master=s' => \$masterURI,
        'r|rid=i' => \$rid,
        't|tls=s' => \$tls,
);

if (!$opts_good) {
        print STDERR "\n";
        usage();
}
if ($help) {
        usage(0);
}

if ($masterURI && $masterURI !~ /^ldaps?:\/\//) {
  usage(0);
}

if ($masterURI && $masterURI !~ /\/$/) {
  usage(0);
}

if ($tls && $tls ne "critical" && $tls ne "off") {
  usage(0);
}

my $localxml = XMLin("/opt/zimbra/conf/localconfig.xml");
my $ldap_root_password = $localxml->{key}->{ldap_root_password}->{value};
chomp($ldap_root_password);
my $ldap_is_master = $localxml->{key}->{ldap_is_master}->{value};
chomp($ldap_is_master);
my $ldap_replication_password = $localxml->{key}->{ldap_replication_password}->{value};
my $ldap_starttls_supported = $localxml->{key}->{ldap_starttls_supported}->{value};
my $zimbra_require_interprocess_security = $localxml->{key}->{zimbra_require_interprocess_security}->{value};

if(lc($ldap_is_master) eq "true") {
  usage(0);
}

if(lc($ldap_is_master) ne "true") {
  my $ldap = Net::LDAP->new('ldapi://%2fopt%2fzimbra%2fdata%2fldap%2fstate%2frun%2fldapi/') or die "$@";
  my $mesg = $ldap->bind("cn=config", password=>"$ldap_root_password");
  $mesg->code && die "Bind: ". $mesg->error . "\n"; 

  my $bdn="olcDatabase={2}mdb,cn=config";
  $mesg = $ldap->search(
            base => "$bdn",
            filter => "(olcSyncrepl=*)",
            attrs => ['olcSyncrepl']
  );
  my $size = $mesg->count;
  if ($size > 0) {
    my $entry=$mesg->entry(0);
    $replEntry= $entry->get_value('olcSyncRepl');
    my $junk;
    ($junk, $entryRID) = split (/rid=/, $replEntry, 2);
    ($junk, $entryURI) = split (/provider=/, $replEntry, 2);
	($junk, $entryTLS) = split (/starttls=/, $replEntry, 2);
    ($entryRID, $junk) = split (/ /, $entryRID, 2);
    ($entryURI, $junk) = split (/ /, $entryURI, 2);
	($entryTLS, $junk) = split (/ /, $entryTLS, 2);
  }

  if ($query) {
    print "This system has a provider of $entryURI\n";
	print "This system is using a rid of $entryRID\n";
	print "This system currently has a TLS setting of $entryTLS\n";
    $ldap->unbind;
	exit 0;
  }
  if ($tls) {
    if ($masterURI && $masterURI !~ /^ldaps/) {
      if ($tls eq "critical") {
        $tls="starttls=critical";
      }
    } else {
      if ($tls eq "critical" && $entryURI !~ /^ldaps/) {
        $tls="starttls=critical";
      }
    }
  } else {
    if ($masterURI && $masterURI !~ /^ldaps/) {
      if ($ldap_starttls_supported && $zimbra_require_interprocess_security) {
        $tls="starttls=critical";
      }
    } else {
      if ($entryURI !~ /^ldaps/) {
        if ($ldap_starttls_supported && $zimbra_require_interprocess_security) {
          $tls="starttls=critical";
        }
      }
    }
  }

  if ($tls =~ /starttls/ && $replEntry !~ /starttls/) {
    $replEntry =~ s/filter=/$tls filter=/;
  } elsif ($tls !~ /starttls/ && $replEntry =~ /starttls/) {
    $replEntry =~ s/starttls=critical //;
  }

  if ($masterURI) {
    $replEntry =~ s/provider=$entryURI/provider=$masterURI/;
  }

  if ($rid) {
    $replEntry =~ s/rid=$entryRID/rid=$rid/;
  }

  my $err;

  $mesg = $ldap->modify(
    $bdn,
    replace=>{olcSyncrepl=>"$replEntry"},
  );
  $err=$mesg->code;

  if ($masterURI) {
    $mesg = $ldap->modify(
      $bdn,
      replace=>{olcUpdateRef=>"$masterURI"},
    );
    if ($err == 0) {
      $err=$mesg->code;
    }
  }
  $ldap->unbind;
  exit($err);
}

sub usage {

        my ($msg) = (@_);

        $msg && print STDERR "\nERROR: $msg\n";
        print STDERR <<USAGE;
  zmldapreplicatool [-q] [-r RID] [-m masterURI] [-t critical|off]

  Where:
  -q: Query the current replication configuration.  This option ignores -m, -r, and -t
  -r: RID is a unique Integer Replication ID for this replication instance.  It must be unique inside this server.  Example: 100 Default: 100.  Generally no need to change this.
  -m: masterURI is the LDAP URI for the master.  Example: ldap://ldap-master.example.com:389/
  -t: set startTLS to critical (required) or off (disabled)

USAGE
        exit (1);
}

