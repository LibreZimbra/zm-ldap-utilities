#!/usr/bin/perl
#
# ***** BEGIN LICENSE BLOCK *****
#
# Zimbra Collaboration Suite Server
# Copyright (C) 2008 Zimbra, Inc.
#
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
#
# ***** END LICENSE BLOCK *****
#

# This script enables and disables proxy, and sets the default values for each case

use strict;
use lib "/opt/zimbra/zimbramon/lib";
use Zimbra::Util::Common;
use Getopt::Std;

if ($> ne 0) {
  print "$0 must be executed as root.\n";
  exit 1;
}

our %options = ();
our %loaded = ();

getopts('defhs',\%options) or die "Unable to set options\n";

if ($options{h})  {
   usage();
   exit 1;
}

if ( $options{d} + $options{e} > 1) {
    usage();
    exit 1;
}

if ( !$options{d} && !$options{e}) {
    usage();
    exit 1;
}   

if ($#ARGV == -1) {
    usage();
    exit 1;

}

my $hostname = $ARGV[0];

open(ZMPROV, "|su - zimbra -c 'zmprov -l'");

if ($options{f}) {
  my $zimbraReverseProxyMailHostQuery =
        "\(\|\(zimbraMailDeliveryAddress=\${USER}\)\(zimbraMailAlias=\${USER}\)\)";
  my $zimbraReverseProxyDomainNameQuery =
        '\(\&\(zimbraVirtualIPAddress=\${IPADDR}\)\(objectClass=zimbraDomain\)\)';
  my $zimbraReverseProxyPortQuery =
        '\(\&\(zimbraServiceHostname=\${MAILHOST}\)\(objectClass=zimbraServer\)\)';
  
  print ZMPROV "mcf zimbraReverseProxyDomainNameQuery $zimbraReverseProxyDomainNameQuery\n";
  print ZMPROV "mcf zimbraReverseProxyMailHostQuery $zimbraReverseProxyMailHostQuery\n";
  print ZMPROV "mcf zimbraReverseProxyPortQuery $zimbraReverseProxyPortQuery\n";
  print ZMPROV "mcf zimbraMemcachedBindPort 11211\n";
  print ZMPROV "mcf zimbraReverseProxyMailHostAttribute zimbraMailHost\n";
  print ZMPROV "mcf zimbraReverseProxyPop3PortAttribute zimbraPop3BindPort\n";
  print ZMPROV "mcf zimbraReverseProxyPop3SSLPortAttribute zimbraPop3SSLBindPort\n";
  print ZMPROV "mcf zimbraReverseProxyImapPortAttribute zimbraImapBindPort\n";
  print ZMPROV "mcf zimbraReverseProxyImapSSLPortAttribute zimbraImapSSLBindPort\n";
  print ZMPROV "mcf zimbraReverseProxyDomainNameAttribute zimbraDomainName\n";
  print ZMPROV "mcf zimbraReverseProxyAuthWaitInterval 10s\n";
}

if ($options{e}) {
  print ZMPROV "ms $hostname ".
    "zimbraImapBindPort 7143 "."zimbraImapProxyBindPort 143 ".
    "zimbraImapSSLBindPort 7993 "."zimbraImapSSLProxyBindPort 993 ".
    "zimbraPop3BindPort 7110 "."zimbraPop3ProxyBindPort 110 ".
    "zimbraPop3SSLBindPort 7995 "."zimbraPop3SSLProxyBindPort 995 ".
    "zimbraReverseProxyMailEnabled TRUE ".
    "zimbraImapCleartextLoginEnabled TRUE ".
    "zimbraPop3CleartextLoginEnabled TRUE ".
    "+zimbraServiceEnabled imapproxy\n";
}

if ($options{d}) {
  print ZMPROV "ms $hostname ".
    "zimbraImapBindPort 143 "."zimbraImapProxyBindPort 7143 ".
    "zimbraImapSSLBindPort 993 "."zimbraImapSSLProxyBindPort 7993 ".
    "zimbraPop3BindPort 110 "."zimbraPop3ProxyBindPort 7110 ".
    "zimbraPop3SSLBindPort 995 "."zimbraPop3SSLProxyBindPort 7995 ".
    "zimbraReverseProxyMailEnabled FALSE ".
    "-zimbraServiceEnabled imapproxy\n";
    if ($options{s}) {
       print ZMPROV "ms $hostname ".
         "zimbraImapCleartextLoginEnabled FALSE ".
         "zimbraPop3CleartextLoginEnabled FALSE\n";
    }
}

close ZMPROV;
exit 0;

sub usage() {
  print "Usage: $0 [-h] [-d] [-e] [-f] [-s] hostname\n";
  print "\t-h: display this help message\n";
  print "\t-d: disable proxy\n";
  print "\t-e: enable proxy\n";
  print "\t-f: Full reset on memcached port and search queries\n";
  print "\t-s: Set cleartext to FALSE (secure mode) on disable\n";
  print "hostname is the value of the zimbra_server_hostname LC key for the server being modified.\n";
  print "Either -e or -d is required\n";
  exit 1;
}

sub getLocalConfig {
  my $key = shift;

  return $main::loaded{lc}{$key}
    if (exists $main::loaded{lc}{$key});

  my $val = `/opt/zimbra/bin/zmlocalconfig -x -s -m nokey ${key} 2> /dev/null`;
  chomp $val;
  $main::loaded{lc}{$key} = $val;
  return $val;
}
